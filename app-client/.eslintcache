[{"/Users/joesummerhayes/projects/games-vault/app-client/src/index.tsx":"1","/Users/joesummerhayes/projects/games-vault/app-client/src/reportWebVitals.ts":"2","/Users/joesummerhayes/projects/games-vault/app-client/src/App.tsx":"3","/Users/joesummerhayes/projects/games-vault/app-client/src/theme.ts":"4","/Users/joesummerhayes/projects/games-vault/app-client/src/views/Review.tsx":"5","/Users/joesummerhayes/projects/games-vault/app-client/src/components/Nav.tsx":"6","/Users/joesummerhayes/projects/games-vault/app-client/src/components/Slider.tsx":"7","/Users/joesummerhayes/projects/games-vault/app-client/src/components/Title.tsx":"8","/Users/joesummerhayes/projects/games-vault/app-client/src/dummy-data/game1.tsx":"9","/Users/joesummerhayes/projects/games-vault/app-client/src/dummy-data/Game.tsx":"10","/Users/joesummerhayes/projects/games-vault/app-client/src/history.ts":"11","/Users/joesummerhayes/projects/games-vault/app-client/src/views/Login.tsx":"12","/Users/joesummerhayes/projects/games-vault/app-client/src/utils/validation.ts":"13","/Users/joesummerhayes/projects/games-vault/app-client/src/views/Signup.tsx":"14","/Users/joesummerhayes/projects/games-vault/app-client/src/actions/types.ts":"15","/Users/joesummerhayes/projects/games-vault/app-client/src/reducers/index.ts":"16","/Users/joesummerhayes/projects/games-vault/app-client/src/reducers/user-auth.ts":"17","/Users/joesummerhayes/projects/games-vault/app-client/src/actions/auth.ts":"18","/Users/joesummerhayes/projects/games-vault/app-client/src/data/create-user.ts":"19","/Users/joesummerhayes/projects/games-vault/app-client/src/components/Button.tsx":"20","/Users/joesummerhayes/projects/games-vault/app-client/src/data/login.ts":"21","/Users/joesummerhayes/projects/games-vault/app-client/src/data/graph-ql.ts":"22","/Users/joesummerhayes/projects/games-vault/app-client/src/data/simple-fetch.ts":"23","/Users/joesummerhayes/projects/games-vault/app-client/src/data/get-user.ts":"24","/Users/joesummerhayes/projects/games-vault/app-client/src/views/CreateReview.tsx":"25","/Users/joesummerhayes/projects/games-vault/app-client/src/views/Form/form-types.ts":"26","/Users/joesummerhayes/projects/games-vault/app-client/src/views/Form/index.tsx":"27","/Users/joesummerhayes/projects/games-vault/app-client/src/views/Form/utils.ts":"28","/Users/joesummerhayes/projects/games-vault/app-client/src/actions/review.ts":"29","/Users/joesummerhayes/projects/games-vault/app-client/src/data/create-review.ts":"30"},{"size":1263,"mtime":1613841375341,"results":"31","hashOfConfig":"32"},{"size":425,"mtime":1612009816059,"results":"33","hashOfConfig":"32"},{"size":1727,"mtime":1624908864530,"results":"34","hashOfConfig":"32"},{"size":162,"mtime":1612892599716,"results":"35","hashOfConfig":"32"},{"size":905,"mtime":1612010985320,"results":"36","hashOfConfig":"32"},{"size":694,"mtime":1612010963317,"results":"37","hashOfConfig":"32"},{"size":1107,"mtime":1612010963317,"results":"38","hashOfConfig":"32"},{"size":1030,"mtime":1613754180658,"results":"39","hashOfConfig":"32"},{"size":2464,"mtime":1612010978340,"results":"40","hashOfConfig":"32"},{"size":360,"mtime":1612010978339,"results":"41","hashOfConfig":"32"},{"size":88,"mtime":1612648255728,"results":"42","hashOfConfig":"32"},{"size":4926,"mtime":1624308314415,"results":"43","hashOfConfig":"32"},{"size":1409,"mtime":1625171459403,"results":"44","hashOfConfig":"32"},{"size":6145,"mtime":1613908951203,"results":"45","hashOfConfig":"32"},{"size":520,"mtime":1626110728954,"results":"46","hashOfConfig":"32"},{"size":197,"mtime":1613839134606,"results":"47","hashOfConfig":"32"},{"size":1012,"mtime":1625333719629,"results":"48","hashOfConfig":"32"},{"size":2221,"mtime":1616885080344,"results":"49","hashOfConfig":"32"},{"size":644,"mtime":1625168937443,"results":"50","hashOfConfig":"32"},{"size":2568,"mtime":1625258096512,"results":"51","hashOfConfig":"32"},{"size":762,"mtime":1613907499658,"results":"52","hashOfConfig":"32"},{"size":1159,"mtime":1613844856421,"results":"53","hashOfConfig":"32"},{"size":355,"mtime":1613166826380,"results":"54","hashOfConfig":"32"},{"size":410,"mtime":1616937039578,"results":"55","hashOfConfig":"32"},{"size":2554,"mtime":1626101183788,"results":"56","hashOfConfig":"32"},{"size":946,"mtime":1626095107209,"results":"57","hashOfConfig":"32"},{"size":4516,"mtime":1626101128943,"results":"58","hashOfConfig":"32"},{"size":414,"mtime":1625417038864,"results":"59","hashOfConfig":"32"},{"size":1027,"mtime":1626111109056,"results":"60","hashOfConfig":"32"},{"size":912,"mtime":1626100919509,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},"1paievo",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"65"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"65"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"65"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"65"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"65"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"65"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"65"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"/Users/joesummerhayes/projects/games-vault/app-client/src/index.tsx",["132"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {\n  createStore,\n  applyMiddleware,\n  compose,\n  Store,\n} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport { batchedSubscribe } from 'redux-batched-subscribe';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport reducer from './reducers';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { ActionTypes } from './actions/types';\n// import { muiTheme } from './theme';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\n const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store: Store = createStore(\n  reducer,\n  compose(\n    applyMiddleware(reduxThunk),\n    composeEnhancers(),\n    batchedSubscribe((notify) => {\n      notify();\n    }),\n  ),\n);\n\nconst token = localStorage.getItem('token');\nif (token) {\n  store.dispatch({ type: ActionTypes.loginUser });\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    {/* <MuiThemeProvider theme={muiTheme}> */}\n      <App />\n    {/* </MuiThemeProvider> */}\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// serviceWorker.unregister();\n",["133","134"],"/Users/joesummerhayes/projects/games-vault/app-client/src/reportWebVitals.ts",[],["135","136"],"/Users/joesummerhayes/projects/games-vault/app-client/src/App.tsx",["137"],"import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Router, Route } from 'react-router-dom';\nimport { Review } from './views/Review';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Container } from '@material-ui/core'\nimport history from './history';\nimport { Nav } from './components/Nav';\nimport {colors} from './theme';\nimport { Login } from './views/Login';\nimport Signup from './views/Signup';\nimport { getUserAction } from './actions/auth';\nimport { CreateReview } from './views/CreateReview'\n\n\nconst useStyles = makeStyles({\n  conatiner: {\n    minHeight: '100vh',\n    background: 'white',\n    fontFamily: 'Quicksand, sans-serif',\n    width: '100%'\n  },\n  root: {\n    background: colors.white,\n    marginBottom: '7rem'\n  }\n})\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  const token = localStorage.getItem('token');\n  const expiryDate = localStorage.getItem('expiryDate');\n  const dispatch = useDispatch();\n  \n  useEffect(() => {\n    if (token) {\n      dispatch(getUserAction())\n    }\n  });\n\n  return (\n    <Router history={history}>\n      <div className={classes.root}>\n        <Nav />\n        <Container maxWidth=\"md\" style={{paddingRight: '32px', paddingLeft: '32px'}}>\n          <div className={`${classes.conatiner}`}>\n            <header className=\"App-header\">\n            </header>\n            <Route expact component={Review} path=\"/review\" />\n            <Route exact component={Login} path=\"/login\" />\n            <Route exact component={Signup} path=\"/signup\" />\n            <Route exact component={CreateReview} path=\"/create-review\" />\n          </div>\n        </Container>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/joesummerhayes/projects/games-vault/app-client/src/theme.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/views/Review.tsx",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/components/Nav.tsx",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/components/Slider.tsx",["138","139","140","141","142","143"],"import React, { Component } from \"react\";\nimport Slider from \"react-slick\";\nimport { game1 } from '../dummy-data/game1';\nimport Box from '@material-ui/core/Box';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport {colors} from \"../theme\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport './slider.css';\n\nconst useStyles = makeStyles({})\n\nexport const SliderComponent = () => {\n    const classes = useStyles();\n\n    const settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1,\n    };\n\n    return (\n      <Box>\n        <Slider {...settings}>\n          <div>\n            <img src={game1.image[0]} style={{width: '100%' }} />\n          </div>\n          {/* <div>\n            <img src={game1.image[1]} style={{width: '100%' }} />\n          </div> */}\n          <div>\n            <img src={game1.image[2]} style={{width: '100%' }} />\n          </div>\n          <div>\n            <img src={game1.image[3]} style={{width: '100%' }} />\n          </div>\n        </Slider>\n      </Box>\n    );\n  }","/Users/joesummerhayes/projects/games-vault/app-client/src/components/Title.tsx",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/dummy-data/game1.tsx",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/dummy-data/Game.tsx",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/history.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/views/Login.tsx",["144","145","146","147"],"import React, { ReactElement } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TextField, Box, Typography } from '@material-ui/core';\nimport Arrow from '@material-ui/icons/ArrowForward';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { loginAction } from '../actions/auth';\nimport { required, email } from '../utils/validation';\nimport {colors} from '../theme';\n// import hero from '../images/loginHero.png';\nimport Button from '../components/Button';\n// import { AppState } from '../app-state';\n\nconst useStyles = makeStyles({\n  root: {\n    margin: 'auto',\n    width: '40%',\n    marginTop: '4rem',\n    marginBottom: '4rem',\n  },\n  inputField: {\n    paddingTop: '1rem',\n  },\n  submitButton: {\n    margin: '1rem 0 1rem 0',\n    backgroundColor: 'black',\n    color: 'white',\n    borderRadius: 'inherit',\n  },\n  box: {\n    marginTop: '10rem',\n    backgroundColor: '#d4ebf2',\n    // backgroundImage: `url(${hero})`,\n    // height: '100vh',\n    // width: '100vw',\n    backgroundSize: '100%',\n    backgroundRepeat: 'no-repeat',\n  },\n  inputText: {\n    color: 'black',\n  },\n  textField: {\n    backgroundColor: 'rgba(343, 342, 324, 0.5)',\n  },\n  helperActions: {\n    paddingBottom: '1rem',\n    letterSpacing: '0.1px',\n  },\n  arrowIcon: {\n    height: '0.7em',\n  },\n  header: {\n    fontSize: '1.5rem',\n    letterSpacing: '0.1px',\n  },\n});\n\nexport const Login: React.FC = () => {\n\n  const [form, setForm] = React.useState<Record<string, GVType.FormItem>>({\n    email: {\n      touched: false,\n      valid: false,\n      value: '',\n      validators: [required, email],\n    },\n    password: {\n      touched: false,\n      valid: false,\n      value: '',\n      validators: [required],\n    },\n  });\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  // const isError = useSelector((state: AppState) => state.error);\n\n  const loginUser = (e: React.MouseEvent<HTMLButtonElement>): void => {\n    e.preventDefault();\n    const formValues = {\n      email: form.email.value,\n      password: form.password.value,\n    };\n    dispatch(loginAction(formValues));\n  };\n\n  const blurHandler = (inputField: string): void => {\n    setForm({\n      ...form,\n      [inputField]: {\n        ...form[inputField],\n        touched: true,\n      },\n    });\n  };\n\n  const handleError = (): ReactElement | void => {\n    // if (isError?.errorLocation === 'login') {\n    //   return <MuiAlert severity=\"error\">{isError.specificError}</MuiAlert>;\n    // }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const { target } = event;\n    const { value } = target;\n    const { id } = target;\n    let isInputValid = true;\n    form[id].validators.map((validator: GVType.Validator): void => {\n      isInputValid = isInputValid && validator(value);\n    });\n\n    const updatedForm = {\n      ...form,\n      [id]: {\n        ...form[id],\n        valid: isInputValid,\n        value,\n      },\n    };\n\n    setForm(updatedForm);\n  };\n\n  return (\n    <Box display=\"flex\" className={classes.box}>\n      <form className={classes.root}>\n        <Typography className={classes.header}>\n          Sign In\n        </Typography>\n        <div className={classes.inputField}>\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            value={form.email.value}\n            label=\"Email\"\n            // placeholder = \"Email\"\n            InputLabelProps={{ className: classes.inputText }}\n            onChange={handleInputChange}\n            onBlur={(): void => blurHandler('email')}\n            id=\"email\"\n            helperText={form.email.touched && !form.email.valid ? 'Must provide an email' : ''}\n            error={form.email.touched && !form.email.valid}\n            className={classes.textField}\n          />\n        </div>\n        <div className={classes.inputField}>\n          <TextField\n            fullWidth\n            variant=\"outlined\"\n            value={form.password.value}\n            label=\"Password\"\n            InputLabelProps={{ className: classes.inputText }}\n            onChange={handleInputChange}\n            onBlur={(): void => blurHandler('password')}\n            id=\"password\"\n            type=\"password\"\n            helperText={form.password.touched && !form.password.valid ? 'Enter your password' : ''}\n            error={form.password.touched && !form.password.valid}\n            className={classes.textField}\n          />\n        </div>\n        {handleError()}\n        <Button text=\"Login\" clickHandler={loginUser} className={classes.submitButton} />\n        <Typography className={classes.helperActions}>\n          Forgot your password?\n          <Arrow className={classes.arrowIcon} />\n        </Typography>\n        <Typography className={classes.helperActions}>\n          Sign up?\n          <Arrow className={classes.arrowIcon} />\n        </Typography>\n      </form>\n    </Box>\n  );\n};\n","/Users/joesummerhayes/projects/games-vault/app-client/src/utils/validation.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/views/Signup.tsx",["148","149","150","151"],"import React, { ReactElement } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport TextField from '@material-ui/core/TextField';\nimport { Box } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { required, length, email, confirmPass } from '../utils/validation';\n// import { createUserAction } from '../actions/index';\nimport createUser from '../data/create-user';\n\nconst useStyles = makeStyles({\n  root: {\n    margin: 'auto',\n    width: '50%',\n  },\n  inputField: {\n    paddingTop: '1rem',\n  },\n  submitButton: {\n    marginTop: '1rem',\n  },\n});\n\nconst Signup = (): ReactElement => {\n  // const dispatch = useDispatch();\n  const classes = useStyles();\n  // const isError = useSelector((state: any) => state.error);\n  const [formIsValid, validateForm] = React.useState(false);\n  const [form, setForm] = React.useState<Record<string, GVType.FormItem>>({\n    username: {\n      value: '',\n      touched: false,\n      valid: false,\n      validators: [required],\n    },\n    email: {\n      value: '',\n      touched: false,\n      valid: false,\n      validators: [required, email],\n    },\n    password: {\n      value: '',\n      touched: false,\n      valid: false,\n      validators: [required, length({ min: 5 })],\n    },\n    confirmPass: {\n      value: '',\n      touched: false,\n      valid: false,\n      validators: [required, length({ min: 5 })],\n    },\n  });\n\n  const blurHandler = (inputField: string): void => {\n    setForm({\n      ...form,\n      [inputField]: {\n        ...form[inputField],\n        touched: true,\n      },\n    });\n  };\n\n  const handleError = (): ReactElement | void => {\n    // if (isError.errorLocation === 'createUser') {\n    //   return <MuiAlert severity=\"error\">{isError.specificError}</MuiAlert>;\n    // }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const { target } = event;\n    const input = target.getAttribute('id') || '';\n    const { value } = target;\n    let isInputValid = true;\n\n    form[input].validators.map((validator: GVType.Validator): void => {\n      isInputValid = isInputValid && validator(value);\n    });\n\n    if (input === 'confirmPass') {\n      isInputValid = isInputValid && confirmPass(form.password.value, value);\n    }\n\n    const updatedForm = {\n      ...form,\n      [input]: {\n        ...form[input],\n        valid: isInputValid,\n        value,\n      },\n    };\n\n    const formEntries: [string, GVType.FormItem][] = Object.entries(updatedForm);\n\n    const validations = formEntries.map((item: [string, GVType.FormItem]) => {\n      return item[1].valid;\n    });\n    const reducer = (acc: boolean, item: boolean): boolean => {\n      if (acc && item) {\n        return item;\n      }\n      return false;\n    };\n\n    const isFormValid = validations.reduce(reducer, true);\n\n    validateForm(isFormValid);\n    setForm(updatedForm);\n  };\n\n  return (\n    <Box display=\"flex\">\n      <form\n        className={classes.root}\n        onSubmit={(e: React.FormEvent<HTMLFormElement>): void => {\n          e.preventDefault();\n          if (formIsValid) {\n            // dispatch(\n            //   createUserAction({\n            //     name: form.name.value,\n            //     email: form.email.value,\n            //     password: form.password.value,\n            //   }),\n            // );\n            createUser({\n              username: form.username.value,\n              email: form.email.value,\n              password: form.email.value\n            })\n          }\n        }}\n      >\n        <div className={classes.inputField}>\n          <TextField\n            id=\"username\"\n            variant=\"outlined\"\n            placeholder=\"username\"\n            value={form.username.value}\n            onChange={handleInputChange}\n            onBlur={(): void => blurHandler('username')}\n            error={form.username.touched && !form.username.valid}\n            required\n            fullWidth\n            helperText={form.username.touched && !form.username.valid ? 'Must provide user name' : ''}\n          />\n        </div>\n        <div className={classes.inputField}>\n          <TextField\n            id=\"email\"\n            variant=\"outlined\"\n            placeholder=\"email address\"\n            value={form.email.value}\n            onChange={handleInputChange}\n            onBlur={(): void => blurHandler('email')}\n            error={form.email.touched && !form.email.valid}\n            required\n            fullWidth\n            helperText={form.email.touched && !form.email.valid ? 'Must provide a valid email address' : ''}\n          />\n        </div>\n        <div className={classes.inputField}>\n          <TextField\n            id=\"password\"\n            variant=\"outlined\"\n            placeholder=\"password\"\n            value={form.password.value}\n            onChange={handleInputChange}\n            type=\"password\"\n            onBlur={(): void => blurHandler('password')}\n            error={form.password.touched && !form.password.valid}\n            required\n            fullWidth\n            helperText={form.password.touched && !form.password.valid ? 'Password must be over 5 characters long' : ''}\n          />\n        </div>\n        <div className={classes.inputField}>\n          <TextField\n            id=\"confirmPass\"\n            variant=\"outlined\"\n            placeholder=\"confirm password\"\n            value={form.confirmPass.value}\n            onChange={handleInputChange}\n            type=\"password\"\n            onBlur={(): void => blurHandler('confirmPass')}\n            error={form.confirmPass.touched && form.confirmPass.value !== form.password.value}\n            required\n            fullWidth\n            helperText={form.confirmPass.touched && form.confirmPass.value !== form.password.value ? 'Passwords do not match' : ''}\n          />\n        </div>\n        {handleError()}\n        <Button\n          variant=\"contained\"\n          className={classes.submitButton}\n          type=\"submit\"\n        >\n          Submit\n        </Button>\n      </form>\n    </Box>\n  );\n};\n\nexport default Signup;\n","/Users/joesummerhayes/projects/games-vault/app-client/src/actions/types.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/reducers/index.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/reducers/user-auth.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/actions/auth.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/data/create-user.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/components/Button.tsx",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/data/login.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/data/graph-ql.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/data/simple-fetch.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/data/get-user.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/views/CreateReview.tsx",["152"],"import React from 'react';\nimport {maxTen, required} from '../utils/validation';\nimport { Form } from './Form';\nimport { createReviewAction } from '../actions/review';\nimport {IForm, Valuetype, Selection} from './Form/form-types';\nimport GVType from '../../../@types';\n\nexport const CreateReview: React.FC = () => {\n  const form: IForm = {\n    fields: [\n      {\n        key: 'title',\n        valueType: Valuetype.string,\n        validators: [required],\n        value: '',\n        helperText: `Don't forget to provide a title`,\n        required: true,\n        placeholder: 'Title',\n        label: 'Title',\n        fullWidth: true\n      },\n      {\n        key: 'synopsis',\n        valueType: Valuetype.string,\n        validators: [required],\n        helperText: `Don't forget to provide a review synopsis`,\n        value: '',\n        placeholder: 'Synopsis',\n        label: 'Synopsis',\n        multiline: true,\n        required: true,\n        fullWidth: true,\n        rows: 3\n      },\n      {\n        key: 'review',\n        valueType: Valuetype.string,\n        validators: [required],\n        helperText: `Don't forget to write your main review`,\n        value: '',\n        placeholder: 'Review',\n        label: 'Review',\n        multiline: true,\n        required: true,\n        fullWidth: true,\n        rows: 5\n      },\n      {\n        key: 'images',\n        valueType: Valuetype.string,\n        validators: [required],\n        helperText: `Add urls to images seperated by a commar`,\n        value: '',\n        label: 'Images',\n        placeholder: 'Add urls to images seperated by a commar',\n        multiline: true,\n        required: true,\n        fullWidth: true,\n        rows: 5\n      },\n      {\n        key: 'rating',\n        label: 'Rating',\n        helperText: `Don't forget to provide a rating out of 10!`,\n        valueType: Valuetype.number,\n        validators: [required, maxTen],\n        value: '',\n        required: true,\n        placeholder: 'Score out of 10',\n      },\n      {\n        key: 'console',\n        label: 'Console',\n        helperText: `Don't forget to select the console you played the game on`,\n        valueType: Valuetype.string,\n        validators: [required],\n        value: '',\n        required: true,\n        placeholder: 'Console',\n        selection: [\n          Selection.PS4,\n          Selection.PS5,\n          Selection.Switch,\n          Selection.Xbox1,\n          Selection.XboxSX,\n          Selection.PC,\n        ]\n      },\n    ],\n    onSubmit: createReviewAction,\n  }\n\n \n\n  return (\n    <Form { ...form } />\n  );\n}","/Users/joesummerhayes/projects/games-vault/app-client/src/views/Form/form-types.ts",["153"],"import {Dispatch} from \"redux\";\n\nexport enum Valuetype {\n  \"string\",\n  \"number\",\n  \"boolean\",\n  \"date\"\n}\n\nexport interface Validator {\n  (arg: string): boolean;\n}\n\nexport enum Selection {\n  PS4 = \"PlayStation 4\",\n  PS5 = \"PlayStation 5\",\n  Switch = \"Nintendo Switch\",\n  Xbox1 = \"Xbox 1\",\n  XboxSX = \"Xbox Series X\",\n  PC =\"PC\",\n}\nexport interface IFormField {\n  key: string;\n  valueType: Valuetype;\n  validators: Validator[];\n  value: any;\n  touched?: boolean;\n  valid?: boolean;\n  placeholder?: string;\n  required?: boolean;\n  helperText?: string;\n  fullWidth?: boolean;\n  multiline?: boolean;\n  rows?: number;\n  label?: string;\n  selection?: string[];\n}\n\nexport interface IForm {\n  fields: IFormField[];\n\n  // this actually needs to describe an action creator function\n  // onSubmit<a, b>(inputdata: a): Promise<b>;\n  onSubmit: any;\n}\n\n// const createReviewAction: (createReviewInputData: GVType.Review) => (dispatch: Dispatch) => Promise<void>","/Users/joesummerhayes/projects/games-vault/app-client/src/views/Form/index.tsx",["154"],"import React from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { IForm, IFormField, Valuetype } from './form-types';\nimport { TextField, InputLabel, Select, MenuItem, FormControl } from '@material-ui/core';\nimport Button from '../../components/Button';\nimport { validateForm } from './utils';\n\nimport { AppState } from '../../app-state';\n\nexport const Form: React.FC<IForm> = (props: IForm) => {\n  const { fields, onSubmit } = props;\n\n  React.useEffect(() => {\n    setForm(fields)\n  }, [fields]);\n\n  const [form, setForm] = React.useState<IFormField[]>([])\n  const [formReady, changeReadyState] = React.useState<boolean>(false);\n  const userId = useSelector((state: AppState) => state?.user?.details?._id);\n  const dispatch = useDispatch();\n\n  const submitForm = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n    if (!formReady) {\n      console.error('Form is in an incomplete state');\n    };\n    const serialisedForm = form.reduce((acc, cur) => {\n      const { key, value } = cur;\n      return {\n        ...acc,\n        [key]: value\n      };\n    }, {\n      userId\n    })\n    console.log('!!!!', serialisedForm);\n    dispatch(onSubmit(serialisedForm));\n  }\n\n  const onBlur = (event: React.FocusEvent) => {\n    const { target: { id } } = event;\n    const formCopy = form.map((field) => {\n      if (field.key !== id) return field;\n      const activeField = {...field};\n      activeField.touched = true;\n      return activeField;\n    })\n    setForm(formCopy);\n  }\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    const { target } = event;\n    const input = target.getAttribute('id') || '';\n    const { value } = target;\n\n    const formCopy = form.map((field) => {\n      if (field.key !== input) return field;\n      let activeField = {...field};\n      // does it pass validation?\n      let isValid = true;\n      activeField.validators.map((validator): void => {\n        isValid = isValid && validator(value);\n      });\n      // update valid status\n      activeField.valid = isValid;\n\n      // update value\n      activeField.value = value;\n      return activeField;\n    });\n\n    // set form as ready if all required fields are marked as valid\n    const readyCheck = validateForm(formCopy);\n    readyCheck ? changeReadyState(true) : changeReadyState(false);\n    \n    setForm(formCopy);\n  }\n\n  const handleDropDownChange = (event: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>, child: React.ReactNode) => {\n    const { target } = event;\n    const { value, name } = target;\n\n    const formCopy = form.map((field) => {\n      if (field.key !== name) return field;\n      let activeField = {...field};\n      activeField.value = value;\n      activeField.valid = true;\n      return activeField;\n    });\n\n    const readyCheck = validateForm(formCopy);\n    readyCheck ? changeReadyState(true) : changeReadyState(false);\n    setForm(formCopy);\n  }\n\n    return (\n      <form>\n        {form.map(({ key, value, touched, valid, placeholder, required, helperText, fullWidth, multiline, rows, valueType, label, selection }) => {\n          if (selection) {\n            return (\n              <div className=\"mt3 mb3\">\n                <FormControl variant=\"filled\" className=\"w5\">\n                  <InputLabel id={key}>{placeholder}</InputLabel>\n                  <Select labelId={key} name={key} onChange={handleDropDownChange} value={value}>\n                    {selection.map((item) => <MenuItem value={item}>{item}</MenuItem>)}\n                  </Select>\n                </FormControl>\n              </div>\n            );\n          }\n            return (\n              <div className=\"mt3 mb3\">\n                <TextField\n                  id={key}\n                  variant=\"outlined\"\n                  placeholder={placeholder}\n                  value={value}\n                  required={required}\n                  fullWidth={fullWidth}\n                  onChange={handleInputChange}\n                  onBlur={onBlur}\n                  error={touched && !valid}\n                  helperText={touched && !valid ? helperText : ''}\n                  multiline={multiline}\n                  rows={rows}\n                  type={Valuetype[valueType]}\n                  label={label}\n                  InputProps={{style: {minHeight: '3.5rem'}}}\n                />\n              </div>\n            );\n        })}\n        <Button text=\"submit\" clickHandler={submitForm} disabled={!formReady} />\n      </form>\n    );\n};\n","/Users/joesummerhayes/projects/games-vault/app-client/src/views/Form/utils.ts",[],"/Users/joesummerhayes/projects/games-vault/app-client/src/actions/review.ts",["155"],"/Users/joesummerhayes/projects/games-vault/app-client/src/data/create-review.ts",[],{"ruleId":"156","severity":1,"message":"157","line":12,"column":10,"nodeType":"158","messageId":"159","endLine":12,"endColumn":26},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"160","replacedBy":"164"},{"ruleId":"162","replacedBy":"165"},{"ruleId":"156","severity":1,"message":"166","line":32,"column":9,"nodeType":"158","messageId":"159","endLine":32,"endColumn":19},{"ruleId":"156","severity":1,"message":"167","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":26},{"ruleId":"156","severity":1,"message":"168","line":7,"column":9,"nodeType":"158","messageId":"159","endLine":7,"endColumn":15},{"ruleId":"156","severity":1,"message":"169","line":14,"column":11,"nodeType":"158","messageId":"159","endLine":14,"endColumn":18},{"ruleId":"170","severity":1,"message":"171","line":28,"column":13,"nodeType":"172","endLine":28,"endColumn":66},{"ruleId":"170","severity":1,"message":"171","line":34,"column":13,"nodeType":"172","endLine":34,"endColumn":66},{"ruleId":"170","severity":1,"message":"171","line":37,"column":13,"nodeType":"172","endLine":37,"endColumn":66},{"ruleId":"156","severity":1,"message":"173","line":2,"column":23,"nodeType":"158","messageId":"159","endLine":2,"endColumn":34},{"ruleId":"156","severity":1,"message":"174","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":16},{"ruleId":"156","severity":1,"message":"168","line":9,"column":9,"nodeType":"158","messageId":"159","endLine":9,"endColumn":15},{"ruleId":"175","severity":1,"message":"176","line":108,"column":65,"nodeType":"177","messageId":"178","endLine":108,"endColumn":67},{"ruleId":"156","severity":1,"message":"173","line":2,"column":10,"nodeType":"158","messageId":"159","endLine":2,"endColumn":21},{"ruleId":"156","severity":1,"message":"179","line":2,"column":23,"nodeType":"158","messageId":"159","endLine":2,"endColumn":34},{"ruleId":"156","severity":1,"message":"174","line":4,"column":8,"nodeType":"158","messageId":"159","endLine":4,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":79,"column":68,"nodeType":"177","messageId":"178","endLine":79,"endColumn":70},{"ruleId":"156","severity":1,"message":"180","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":14},{"ruleId":"156","severity":1,"message":"181","line":1,"column":9,"nodeType":"158","messageId":"159","endLine":1,"endColumn":17},{"ruleId":"175","severity":1,"message":"176","line":61,"column":52,"nodeType":"177","messageId":"178","endLine":61,"endColumn":54},{"ruleId":"156","severity":1,"message":"180","line":4,"column":8,"nodeType":"158","messageId":"159","endLine":4,"endColumn":14},"@typescript-eslint/no-unused-vars","'MuiThemeProvider' is defined but never used.","Identifier","unusedVar","no-native-reassign",["182"],"no-negated-in-lhs",["183"],["182"],["183"],"'expiryDate' is assigned a value but never used.","'Component' is defined but never used.","'colors' is defined but never used.","'classes' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useSelector' is defined but never used.","'MuiAlert' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useDispatch' is defined but never used.","'GVType' is defined but never used.","'Dispatch' is defined but never used.","no-global-assign","no-unsafe-negation"]